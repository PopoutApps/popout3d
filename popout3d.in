#! /usr/bin/python3
# popout3d

# Flatpak uses different directories and has no alignment of images.
GBratio = 1 #13/12

package = 'debian' #debian/flatpak/none

if package == 'flatpak':
	version = 'Popout3D V0.5.1'
else:
	version = 'Popout3D V1.5.1'

'''
--------------------------------------------------------------------------------
Popout3D Stereo Image Creation

GNU GENERAL PUBLIC LICENSE GPLv3

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have a copy of the GNU General Public License
	in /usr/share/common-licenses/GPL-3. If not, 
	see <http://www.gnu.org/licenses/>.
'''

import sys, os, shutil, subprocess, shlex, colorsys, math
from PIL import Image, ImageEnhance # latter for new system
# depends on hugin_tools for align_image_stack (not for Flatpak)

try:
	import gi
except:
	sys.exit('Failed to import gi')

try:
	gi.require_version('Gtk', '3.0')
except:
	print(gi.__version__)
	sys.exit('gi wrong version')

from gi.repository import Gtk, GdkPixbuf, Gdk #Gdk for colour button RGB

# create global variables and set default values
formatcode = ''						 # first letter of format
stylecode = ''						  # first letter of style
scope = ''							  # whether processing Folder or Set
imagelist = []						  # list of images to view or process
imageind = 0							# array index of image to view
pairlist = []

viewtext = ''
warnings = ''						   # list of processing warnings

gladefile = 'popout3d.glade'
preffile = 'popout3d.dat'			   # user preference file

myfile = '{none}'					   # current file
myext = '{none}'						# current extension
#myfold set later
formatcode = 'A'
stylecode = 'L'
view = 'All'
firstrun = True	   
scope = 'Folder'

join2d = '-'							# join2d identifies 2D files
join3d = '='							# join3d identifies 3D files
okchar   = ['0','1','2','3','4','5','6','7','8','9','L','R']
okext	= ['jpg','JPG','jpeg','JPEG','tif','TIF','tiff','TIFF','png','PNG']
okformat = ['A','S','C']
okstyle  = ['L','P']

defaultBright = 0;	  defaultBal = 0
preferenceBright = 0; preferenceBal = 50
choiceBright = 0;	    choiceBal = 0

#-------------------------------------------------------------------------------
'''Added by exalm
$XDG_DATA_HOME defines the base directory relative to which user specific data files should be stored. 
  If $XDG_DATA_HOME is either not set or empty, a default equal to $HOME/.local/share should be used.
	Done.
$XDG_CONFIG_HOME defines the base directory relative to which user specific configuration files should be stored. 
	If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config should be used.
	Not done.
'''

# home folder
homefold = os.getenv('XDG_HOME')
if homefold != None:
	homefold = homefold +'/'
else:
	homefold = os.getenv('HOME') + '/'

# work folder
workfold = homefold + '.popout3d/work/'	

# config folder
configfold = os.getenv('XDG_CONFIG_HOME')
if configfold != None:
	configfold = configfold + '/popout3d/'
else:
	configfold = os.getenv('HOME') + '/.config/popout3d/'

# project folder
if package == 'flatpak':
	datafold = '/app/share/popout3d/'
elif package == 'debian':
	datafold = os.getenv('XDG_DATA_HOME')
	if datafold != None:
		datafold = datafold + '/popout3d/'
	else:
		#datafold = os.getenv('HOME') + '/.config/popout3d/' <<<<<<<<<<<
		datafold = '/usr/share/popout3d/'
else: # no package
	datafold = ''

#-------------------------------------------------------------------------------		  
def getpreferences():
	global version, myfold, myfile, myext, formatcode, stylecode, view, scope, firstrun, choiceBright, choiceBal, preferenceBright, preferenceBal
	# local x i

	okpref = True

	# create data folder
	if os.path.isdir(workfold):
		shutil.rmtree(workfold, True)

	result = os.system('mkdir '+ workfold)
	if result != 0:
		print('Cannot create work directory',chr(7))
		sys.exit(result)

	# copy default preferences file to preference folder
	if not os.path.isfile(configfold + preffile):
		#shutil.copyfile(datafold + preffile, configfold + preffile)
		okpref = False ; print('Cannot find default preferences file.')

	# create preferences array
	prefdata = []
	for i in range(9):
		prefdata.append('')

	# load preferences file
	try:
		with open(configfold + preffile, 'r') as infile:
			for i in range(0, 9):
				prefdata[i] = infile.readline()
				prefdata[i] = prefdata[i][:-1] # remove linefeed
	except:
		okpref = False
		print('preferences file failed to load.',chr(7))
		
	if prefdata[0] == version:

		if os.path.exists(prefdata[1]):
			myfold = prefdata[1]
		else:
			myfold = homefold

		myfile = prefdata[2] ; myext = prefdata[3]

		if myfile == '{none}':
		  scope = 'Folder'
		else:
		  scope = 'Set'

		if prefdata[4] in ['A', 'S', 'C']: # Anaglyph/Side-by-Side/Crossover
			formatcode = prefdata[4]
		else:
			okpref = False

		if prefdata[5] in ['L','P']: # Level/Popout
			stylecode = prefdata[5]
		else:
			okpref = False

		if prefdata[6] in ['All', '2D', '3D', 'Triptych']:
			view = prefdata[6]
		else:
			okpref = False

		if prefdata[7] in ['Yes', 'No']:
			if prefdata[7] == 'No':
			  firstrun = False
			else:
			  firstrun = True
		else:
			okpref = False

		x = [0, 0]	   
		for i in range (0, 2):
			try:
				x[i] = int(prefdata[8].split(' ')[i])
			except:
				okpref = False

		if okpref:	   
			if x[0] >= -100 and x[0] <= 100:
				preferenceBright = x[0]
			else:	 
				okpref = False
			if x[1] >= -100 and x[1] <= 100:
				preferenceBal = x[1]					
			else:
				okpref = False
		choiceBright = preferenceBright; choiceBal = preferenceBal	
	#if okpref:
	#	choiceBright = preferenceBright; choiceBal = preferenceBal	

	else:
		print('Error in preferences file', chr(7))
		myfold = homefold
		#preferenceBright = defaultBright; preferenceBal = defaultBal
		choiceBright = defaultBright; choiceBal = defaultBal
		with open(configfold + preffile, 'w') as fn:			
			fn.write(version+'\n')
			fn.write(myfold+'\n')
			fn.write(myfile+'\n')
			fn.write(myext+'\n')
			fn.write(formatcode+'\n')
			fn.write(stylecode+'\n')
			fn.write(view+'\n')
			fn.write('No\n')
			fn.write(str(choiceBright)+' '+str(choiceBal)+'\n')
		   
#===============================================================================
def showMessage(self, which, message):
	if which == 'warn':
		self.messageWarning.format_secondary_text(message)
		self.result = self.messageWarning.run() ; self.messageWarning.hide()
	elif which == 'ask':
		self.messageQuestion.format_secondary_text(message)
		self.result = self.messageQuestion.run() ; self.messageQuestion.hide()
		if self.result == Gtk.ResponseType.YES:
			return('Yes')
		else:
			return('N')
	else: #info		
		self.messageInfo.format_secondary_text(message)
		self.result = self.messageInfo.run() ; self.messageInfo.hide()

#===============================================================================
def showImage(self): #1
	global imageind
	# local newfilename, , newfilenamL, newfilenameR, width, height
	# scale and display image: get image, adjust. Parameters: file, width, height, preserve_active_ratio
	# it might appear that only one of width and height are needed since the ratio is preserved, 
	# but having both means that neither can be too big.

	# make sure viewing list indicator hasn't gone off the end
	if imageind < 0:
		imageind = 0
	elif imageind > len(imagelist) -1:
		imageind = len(imagelist) -1

	# select currently indicated image from imagelist
	if okshow and len(imagelist) > 0:

		newfilename = imagelist[imageind][0]+'.'+imagelist[imageind][1]
		if os.path.isfile(myfold+newfilename):	   

			allocation = self.window.get_allocation()
			width = int(allocation.width*7/10); height = int(allocation.height*8/10)

			# image L and R
			if view == 'Triptych':

				width = int(width/2) ; height = int(height/2)

				newfilenameL = imagelist[imageind][0][:-5]+join2d+imagelist[imageind][0][-4]+'.'+imagelist[imageind][1]
				if os.path.isfile(myfold+newfilenameL):
					pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(myfold+newfilenameL, width, height, True)
					self.imageL.set_from_pixbuf(pixbuf) ; self.labelImageL.set_text(newfilenameL)
	 
				newfilenameR = imagelist[imageind][0][:-5]+join2d+imagelist[imageind][0][-3]+'.'+imagelist[imageind][1]
				if os.path.isfile(myfold+newfilenameR):
					pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(myfold+newfilenameR, width, height, True)
					self.imageR.set_from_pixbuf(pixbuf) ; self.labelImageR.set_text(newfilenameR)

			else:
				self.imageL.clear() ; self.imageR.clear()
				self.labelImageL.set_text('') ; self.labelImageR.set_text('')
			
			pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(myfold+newfilename, width, height, True)
			self.image1.set_from_pixbuf(pixbuf) ; self.labelImage1.set_text(newfilename)

#===============================================================================
def makeImagelist(self):
	global imagelist, imageind
	#local variables newfile, newext, viewtext

	self.image1.clear() ; self.labelImage1.set_text('') 
	imagelist = []

	if view == '2D': # add 2D files to list

		for newfile in os.listdir(myfold):		   
			newfile, newext = os.path.splitext(newfile) ; newext = newext[1:]

			if len(newfile) > 2:
				if (newfile[-2] == join2d #? newfile[0:2] != '3D' and 
				 and newfile[-1] in okchar and newext in okext):
					# only add files in set to imagelist
					# if scope == 'Set' and newfile[2:len(myfile)+2] == myfile and newext == myext:
					if scope == 'Set':
						if len(newfile) >= len(myfile) and newext == myext:
							if newfile[0:len(myfile)] == myfile:
								imagelist.append([newfile, newext])

					# add all files in folder to imagelist
					elif scope == 'Folder':
						imagelist.append([newfile, newext])
		self.labelViewingTitle.set_label('2D Images')
				  
	if view in ['3D', 'Triptych']:  # add 3D files to list

		for newfile in os.listdir(myfold):
			newfile, newext = os.path.splitext(newfile) ; newext = newext[1:]

			#if newfile[0:2] == '3D' and newext in okext: #?>>
			if len(newfile) > 5:
				if (newfile[-5] == join3d
				and newfile[-4] in okchar and newfile[-3] in okchar 
				and newfile[-2] in okformat and newfile[-1] in okstyle
				and newext in okext):

					# only add files in set to imagelist
					#if scope == 'Set' and newfile[2:len(myfile)+2] == myfile and newext == myext:
					if scope == 'Set':
						if len(newfile) >= len(myfile) and newext == myext:
							if newfile[0:len(myfile)] == myfile:
								imagelist.append([newfile, newext])

					# add all files in folder to imagelist
					elif scope == 'Folder':
						imagelist.append([newfile, newext])
		self.labelViewingTitle.set_label('3D Images')
		
	if view == 'All': # add all image files to list
		for newfile in os.listdir(myfold):
			newfile, newext = os.path.splitext(newfile) ; newext = newext[1:]

			if newext in okext:
				# only add files in set to imagelist
				#if scope == 'Set' and newfile[2:len(myfile)+2] == myfile and newext == myext:
				if scope == 'Set' and len(newfile) >= len(myfile) and newext == myext:
				  if newfile[:len(myfile)] == myfile:
					  imagelist.append([newfile, newext])

				# add all files in folder to imagelist
				elif scope == 'Folder':
					imagelist.append([newfile, newext])
		self.labelViewingTitle.set_label('All Images')
		
	imagelist = sorted(imagelist) ; imageind = 0

	viewtext = ''
	#self.labelViewingTitle.set_label(view +' Images')
	
	for i in imagelist:
		viewtext = viewtext+i[0]+'.'+i[1]+'\n'
	
	if viewtext == '':
		viewtext = '-None-'
	self.labelViewing.set_text(viewtext)

#===============================================================================
def processPair(self, newfile, leftn, rightn, newext):
	global warnings
	
	# make filenames then call align_image_stack
	fileleft  = newfile+join2d+leftn+'.'+newext
	fileright = newfile+join2d+rightn+'.'+newext
	fileout   = newfile+join3d+leftn+rightn+formatcode+stylecode+'.'+newext
	
	if package == 'flatpak': # no align-image-stack
		result = 0
	else:	
		if stylecode == 'L': # Level
			command   = 'align_image_stack -a "'+workfold+fileout+'" -m -i -A -C "'+myfold+fileright+'" "'+myfold+fileleft+'"'

		else: # Popout
			command   = 'align_image_stack -a "'+workfold+fileout+'" -m -i -A -C "'+myfold+fileright+'" "'+myfold+fileleft+'"'
		
		args = shlex.split(command) 
		
		result = subprocess.run(args) # this is not spawned
		result = str(result)[str(result).find("returncode")+11] # Output of command is CompletedProcess(args='?', returncode=0)
		result = int(result)

	if result == 0: # align_image_stack has worked (or not used)
		# load left and right images

		if package == 'flatpak': # no align-image-stack so load originals
			image_left = Image.open(myfold+fileleft)
			image_right = Image.open(myfold+fileright)
		else: # load output of align-image-stack
			image_left = Image.open(workfold+fileout+'0001.tif')
			image_right = Image.open(workfold+fileout+'0000.tif')
	
		# NOT NEEDED image_left.load() ; image_right.load()

		# merge the files, put result in myfold
		if formatcode == 'A': # Anaglyph		  

			# Bright and Bal adjustments
			adjL = (choiceBright+100)/100	   *	   (100-choiceBal)/100
			adjR = (choiceBright+100)/100	   *	   (choiceBal+100)/100

			# separate the colour bands then apply colours
			if package == 'flatpak': # no align-image-stack so load originals
				Lred, Lgreen, Lblue = image_left.split()
				Rred, Rgreen, Rblue = image_right.split()		   
			else:
				Lred, Lgreen, Lblue, Ljunk= image_left.split()
				Rred, Rgreen, Rblue, Rjunk = image_right.split()		   				

			Lred	= Lred.point  (lambda i: i * adjL)
			Rgreen  = Rgreen.point(lambda i: i * adjR * GBratio)
			Rblue   = Rblue.point (lambda i: i * adjR / GBratio)

			image_new = Image.merge('RGB', (Lred, Rgreen, Rblue))

		elif formatcode == 'S': # Side-by-Side
			image_width = int(image_left.size[0]) ; image_height = int(image_left.size[1])
			# create double-width blank new image
			image_new = Image.new('RGB', (image_width * 2, image_height), color=0)
			# paste left image into new image on the left
			image_new.paste(image_left, (0, 0, image_width, image_height))
			# paste right image into new image on the right
			image_new.paste(image_right, (image_width, 0, 2 * image_width, image_height))

		else : # Crossover
			image_width = int(image_left.size[0]) ; image_height = int(image_left.size[1])
			# create double-width blank new image
			image_new = Image.new('RGB', (image_width * 2, image_height), color=0)
			# paste right image into new image on the left
			image_new.paste(image_right, (0, 0, image_width, image_height))
			# paste left image into new image on the right
			image_new.paste(image_left, (image_width, 0, 2 * image_width, image_height))

		# save new image, write .view file, remove process file and aligned images
		#?image_new.save(myfold+'3D'+fileout)
		image_new.save(myfold+fileout)

		# delete intermediate files 
		if os.path.isfile(workfold+fileout+'0001.tif'):
			os.remove(workfold+fileout+'0001.tif')
		if os.path.isfile(workfold+fileout+'0000.tif'):
			os.remove(workfold+fileout+'0000.tif') 
	else:
		warnings = warnings + 'It was not possible to align '+fileout+'.\n'

#===============================================================================
def processPairlist(self):
	global warnings
	# local okleft, okright

	if pairlist != []:
		for i in pairlist:

			# open images and get image type and size
			try:
				img = Image.open(myfold+i[0]+join2d+i[1]+'.'+i[3])
				# NOT NEEDED img.load() 
				imageLeftFormat = img.format ; imageLeftSize = img.size
				okleft = True
			except:
				warnings = warnings +'Unable to load left image '+myfold+i[0]+join2d+i[1]+'.'+i[3]+'.\n'
				okleft = False

			try:
				img = Image.open(myfold+i[0]+join2d+i[2]+'.'+i[3])
				# NOT NEEDED img.load()
				imageRightFormat = img.format ; imageRightSize = img.size
				okright = True
			except:
				warnings = warnings +'Unable to load right image '+myfold+i[0]+join2d+i[2]+'.'+i[3]+'.\n'
				okright = False
			
			if okleft and okright:
				# if images match on type and size align them, else skip and warn
				if (imageLeftFormat == imageRightFormat
				and imageLeftSize == imageRightSize):
					processPair(self,i[0],i[1],i[2],i[3]) 
				else:
					if imageLeftFormat != imageRightFormat:
						warnings = warnings +i[0]+join2d+i[1]+'.'+i[3]+' and '+i[0]+join2d+i[2]+'.'+i[3]+' can not be used as they have different filetypes.\n'
					if imageLeftSize != imageRightSize:
						warnings = warnings +i[0]+join2d+i[1]+'.'+i[3]+' '+str(imageLeftSize)+' and '+i[0]+join2d+i[2]+'.'+i[3]+' '+str(imageRightSize)+' can not be used as their dimensions do not match.\n'
 
#===============================================================================
# scan through set of images to call processPair for each valid pair
def makePairlist(self, newfile, newext):
	global warnings, pairlist, viewtext
	# local imagestodo, imagesok

	# find out how many images there are in this set
	imagestodo = 0 ; imagesok = False

	# check for one with a digit at end
	for i in range (0, 10):
		if os.path.isfile(myfold+newfile+join2d+str(i)+'.'+newext):
			imagestodo = imagestodo + 1
	if imagestodo > 1:
		imagesok = True
			
	# check for pair with L at end and R at end
	if os.path.isfile(myfold+newfile+join2d+'L'+'.'+newext) and os.path.isfile(myfold+newfile+join2d+'R'+'.'+newext):
		imagesok = True
		
	# if there are at least two images in the set, call processPair to process, 
	if imagesok:
		# loop through all valid image pairs
		leftn = 0 ; rightn = 1
		while leftn < 9: # only single digits

			rightn = leftn + 1
			while rightn < 10: # top number is 9

				# if left and right images exist and there is no existing 3D one
				if (os.path.isfile(myfold+newfile+join2d+str(leftn)+'.'+newext) and os.path.isfile(myfold+newfile+join2d+str(rightn)+'.'+newext)
				  #?and not os.path.isfile(myfold+'3D'+newfile+join3d+str(leftn)+str(rightn)+formatcode+stylecode+'.'+newext)):
				  and not os.path.isfile(myfold+newfile+join3d+str(leftn)+str(rightn)+formatcode+stylecode+'.'+newext)):
					pairlist.append([newfile, str(leftn), str(rightn), newext])
 
				rightn = rightn + 1
			leftn = leftn + 1

		# if L and R images exist and there is no existing 3D one
		if (os.path.isfile(myfold+newfile+join2d+'L'+'.'+newext) and os.path.isfile(myfold+newfile+join2d+'R'+'.'+newext)
		 #?and not os.path.isfile(myfold+'3D'+newfile+join3d+'LR'+formatcode+stylecode+'.'+newext)):
		 and not os.path.isfile(myfold+newfile+join3d+'LR'+formatcode+stylecode+'.'+newext)):
		   pairlist.append([newfile, 'L', 'R', newext])
  
#===============================================================================
#===============================================================================
# Load the UI, define UI class and actions
class GUI:
	
	def on_window1_destroy(self, object): # close window with 0 or X
		Gtk.main_quit()

	def menuitemQuit(self, menuitem): # quit with File > Quit
		Gtk.main_quit()

	def menuitemFolder(self, menuitem):
		global myfold, myfile, myext, scope, pairlist

		scope = 'Folder' ; pairlist = []
		self.buttonStart.set_label('Queue')

		'''Original for Debian
		filechooser = Gtk.filechooser(title='Select the Folder where the images are', action=Gtk.FileChooserAction.SELECT_FOLDER, parent=self.window)
		filechooser.add_buttons("Cancel", Gtk.ResponseType.CANCEL, "Select",Gtk.ResponseType.OK)		
		
		filechooser.set_current_folder(myfold)
		response = filechooser.run(); filechooser.hide()

		if response == Gtk.ResponseType.OK:
		'''
				
		filechooser = Gtk.FileChooserNative.new(title='Select the Folder where the images are', parent = self.window, action=Gtk.FileChooserAction.SELECT_FOLDER)
		filechooser.set_current_folder(myfold)
		response = filechooser.run();
		filechooser.hide()
		if response == Gtk.ResponseType.ACCEPT:

			newfold = filechooser.get_filename()
			newfold = newfold+'/'
			# must stay inside /home/{user}
			if len(newfold) >= len(homefold):
				if newfold[:len(homefold)] == homefold: 
					myfold = newfold; os.chdir(myfold) 
					myfile = '{none}' ;  myext = '{none}' 
				else:
					showMessage(self, 'warn', 'Folder not changed')
			else:
				showMessage(self, 'warn', 'Folder not changed')		

		self.window.set_title(version + '		  Folder: ' + myfold)

		# update imagelist
		makeImagelist(self) ; showImage(self)
		
	def menuitemSet(self, menuitem):
		global myfold, myfile, myext, scope, pairlist
		#local okfold
		
		scope = 'Set' ; pairlist = []
		self.buttonStart.set_label('Queue')
		'''
		filechooser = Gtk.filechooser(title="Select any file from a set of images", action=Gtk.FileChooserAction.OPEN, parent=self.window)
		filechooser.add_buttons("Cancel", Gtk.ResponseType.CANCEL, "Select",Gtk.ResponseType.OK)
				
		fileFilter = Gtk.FileFilter()
		fileFilter.add_pattern('*.jpg')  ; fileFilter.add_pattern('*.JPG')
		fileFilter.add_pattern('*.jpeg') ; fileFilter.add_pattern('*.JPEG')
		fileFilter.add_pattern('*.tif')  ; fileFilter.add_pattern('*.TIF')
		fileFilter.add_pattern('*.tiff') ; fileFilter.add_pattern('*.TIFF')
		fileFilter.add_pattern('*.png')  ; fileFilter.add_pattern('*.PNG')
		fileFilter.set_name('Image files') ; filechooser.add_filter(fileFilter)
   
		filechooser.set_current_folder(myfold)
		response = filechooser.run();	filechooser.hide()
		
		if response == Gtk.ResponseType.OK:
		'''
		filechooser = Gtk.FileChooserNative.new(title="Select any file from a set of images", parent = self.window, action=Gtk.FileChooserAction.OPEN)
		
		fileFilter = Gtk.FileFilter()
		fileFilter.add_pattern('*.jpg')  ; fileFilter.add_pattern('*.JPG')
		fileFilter.add_pattern('*.jpeg') ; fileFilter.add_pattern('*.JPEG')
		fileFilter.add_pattern('*.tif')  ; fileFilter.add_pattern('*.TIF')
		fileFilter.add_pattern('*.tiff') ; fileFilter.add_pattern('*.TIFF')
		fileFilter.add_pattern('*.png')  ; fileFilter.add_pattern('*.PNG')
		fileFilter.set_name('Image files') ; filechooser.add_filter(fileFilter)
   
		filechooser.set_current_folder(myfold)
		response = filechooser.run();	filechooser.hide()
		
		if response == Gtk.ResponseType.ACCEPT:		
			newfile = filechooser.get_filename()
		else: # answered No or closed window
			newfile = '{none}'   
		
		if len(newfile) >= len(homefold): #newfile contains directory too
			if newfile[0:len(homefold)] == homefold:
				newfold, newfile = os.path.split(newfile)
				newfile, newext = os.path.splitext(newfile)				

				okfile = True
				if join2d in newfile:
					if len(newfile) > 2:
						if (newfile[-2] == join2d and newfile[-1] in okchar):
							myfold = newfold +'/' ; myfile = newfile[:-2]; myext = newext[1:]
						else:
							okfile = False
					else:
						okfile = False						 
				elif join3d in newfile:
					if len(newfile) > 5:
						if (newfile[-5] == join3d and newfile[-4] in okchar and newfile[-3] in okchar and newfile[-2] in okformat and newfile[-1] in okstyle):
							myfold = newfold +'/' ; myfile = newfile[:-5]; myext = newext[1:] 
						else:
							okfile = False
					else:
						okfile = False						 
				else:
					okfile = False

				if okfile == True:
					os.chdir(newfold)
					self.window.set_title(version + '		  Set: ' + myfile + '*.' + myext)
					makeImagelist(self) ; showImage(self)
				else:
					showMessage(self, 'warn', 'Filename must contain a "'+join2d+'" or a "'+join3d+'" and follow other rules, see Help on File Selection.')
			else: 
				showMessage(self, 'warn', 'Filename not changed.')					  
		else: 
			showMessage(self, 'warn', 'Filename not changed.')					  
			
	def menuitemPreferences(self, menuitem):
		result = showMessage(self, 'ask', 'This will save your current settings as the defaults.')
		if result == 'Yes':
			with open(configfold + preffile, 'w') as fn:			
				fn.write(version+'\n')
				fn.write(myfold+'\n')
				fn.write(myfile+'\n')
				fn.write(myext+'\n')
				fn.write(formatcode+'\n')
				fn.write(stylecode+'\n')
				fn.write(view+'\n')
				fn.write('No\n')
				fn.write(str(choiceBright)+' '+str(choiceBal)+'\n')
				
	def messagedialogColours(self, menuitem):
		self.messagedialogColours.run()
		self.messagedialogColours.hide()	 
			
	def menuitemHelp(self, menuitem):
		self.dialogHelp.run() ; self.dialogHelp.hide()

	def buttonClose(self, menuitem):
		self.dialogHelp.hide()
				
	def menuitemAbout(self, menuitem):
		self.dialogboxAbout.run() ; self.dialogboxAbout.hide()
		
	def radiobuttontoggledAll(self, menuitem): 
		global view
		if menuitem.get_active():
			view = 'All'
			makeImagelist(self) ; showImage(self)		   

	def radiobuttontoggled2D(self, menuitem):
		global view
		if menuitem.get_active():
			view = '2D'
			makeImagelist(self) ; showImage(self)

	def radiobuttontoggled3D(self, menuitem):
		global view
		if menuitem.get_active():
			if view == 'Triptych':
				view = '3D'
			else:
				view = '3D' ; makeImagelist(self)
			showImage(self)

	def radiobuttontoggledTriptych(self, menuitem):
		global view
		if menuitem.get_active():
			if view == '3D':
				view = 'Triptych'
			else:
				view = 'Triptych' ; makeImagelist(self)
			showImage(self)

	def radiobuttontoggledAnaglyph(self, radiobutton):
		global formatcode, pairlist
		if radiobutton.get_active():
			self.buttonStart.set_label('Queue')
			formatcode = 'A'
			pairlist = []
			makeImagelist(self) ; showImage(self)		   
				
	def radiobuttontoggledSidebyside(self, radiobutton):
		global formatcode, pairlist
		if radiobutton.get_active():
			self.buttonStart.set_label('Queue')
			formatcode = 'S'
			pairlist = []
			makeImagelist(self) ; showImage(self)		   
				
	def radiobuttontoggledCrossover(self, radiobutton):
		global formatcode, pairlist
		if radiobutton.get_active():
			self.buttonStart.set_label('Queue')
			formatcode = 'C'
			pairlist = []
			makeImagelist(self) ; showImage(self)		   

	def radiobuttontoggledLevel(self, radiobutton):
		global stylecode, pairlist
		if radiobutton.get_active():
			self.buttonStart.set_label('Queue')
			stylecode = 'L' 
			pairlist = []
			makeImagelist(self) ; showImage(self)
		
	def radiobuttontoggledPopout(self, radiobutton):
		global stylecode, pairlist
		if radiobutton.get_active():
			self.buttonStart.set_label('Queue')
			stylecode = 'P'
			pairlist = []		
			makeImagelist(self) ; showImage(self)		   
		
	def buttonStart(self, button): #menuitem
		global warnings, view, pairlist
		# setlist filename style is name less last digit (no 3D at start)		 

		warnings = ''
			 
		# list empty so make one
		if pairlist == []:
			setlist = [] ; viewtext = ''
			self.labelViewingTitle.set_label('Image Files to Create')
			self.labelViewing.set_text('')
			
			if scope == 'Folder': # store one filename for each set in setlist
				for newfile in os.listdir(myfold):
					newfile, newext = os.path.splitext(newfile) ; newext = newext[1:]
					if len(newfile) > 2:
						if (newext in okext
						 and newfile[-2] == join2d and newfile[-1] in okchar 
						 and [newfile[:-2], newext] not in setlist):
							setlist.append([newfile[:-2], newext]) #?

			else: #scope ='Set' store one filename for the set in setlist
				if myfile != '{none}' and myext != '{none}':
					setlist.append([myfile, myext])

			if setlist != []: # check there are some images to do
				setlist = sorted(setlist)	 

				for i in setlist:
					makePairlist(self, i[0], i[1])
				setlist = []
						
				for i in pairlist:					
					viewtext = viewtext+i[0]+join3d+i[1]+i[2]+formatcode+stylecode+'.'+i[3]+'\n'					
					 
				if pairlist != []:
					#self.buttonStart.set_label('	 Process\n(Locks Screen)') # self.labelStart.set_label('(Screen Will Lock)') 
					self.buttonStart.set_label('Process')
					self.labelViewing.set_text(viewtext+'\n')
				else:
					self.labelViewing.set_text('-None-')			   

		
		else: # list has been made so process them
			self.image1.clear() ; self.labelImage1.set_text('')

			processPairlist(self) 
			pairlist = []

			if warnings != '':
				showMessage(self, 'warn', warnings)

			#show 3D images
			self.radiobutton3D.set_active(True)
			makeImagelist(self) ; showImage(self)  

			#self.labelViewing.set_text('')			   
			self.buttonStart.set_label('Queue')
			
	def buttonBack(self, menuitem):
		global imageind		
		
		imageind = imageind - 1
		showImage(self)

	def buttonForward(self, menuitem):
		global imageind
		
		imageind = imageind + 1		
		showImage(self)

	def buttonDelete(self, button): #menuitem
		global imageind
		self.buttonStart.set_label('Queue')
							   
		if len(imagelist) > 0:
			#?if imagelist[imageind][0][0:2] == '3D':
			if len(imagelist[imageind][0]) > 5:
				if (imagelist[imageind][0][-5] == join3d and imagelist[imageind][0][-4] in okchar
				 and imagelist[imageind][0][-3] in okchar and imagelist[imageind][0][-2] in okformat
				 and imagelist[imageind][0][-1] in okstyle):		  
			
					if os.path.isfile(myfold+imagelist[imageind][0]+'.'+imagelist[imageind][1]):
						result = showMessage(self, 'ask', 'Delete ' + imagelist[imageind][0]+'.'+imagelist[imageind][1] + '?')
						if result == 'Yes':
							self.image1.clear() ; self.labelImage1.set_text('')
							self.imageL.clear() ; self.labelImageL.set_text('')
							self.imageR.clear() ; self.labelImageR.set_text('')
							try: 
								os.remove(myfold+imagelist[imageind][0]+'.'+imagelist[imageind][1])
							except:
								showMessage(self,  'warn', 'File already deleted.')

							# remember position before rewriting list
							oldimageind = imageind ;  makeImagelist(self) 
							imageind = oldimageind ;  showImage(self)
				else:
					showMessage(self, 'warn', 'Only 3D images can be deleted.')						  
			else:
				showMessage(self, 'warn', 'Only 3D images can be deleted.')						  

	# scales have changed
	def scaleBrightchanged(self, button):
		global choiceBright
		choiceBright = int(self.scaleBright.get_value())

	def scaleBalchanged(self, button):
		global choiceBal
		choiceBal = int(self.scaleBal.get_value())

	# note that since revert/default buttons change the scale they trigger what
	# it does so don't need to do anything else themselves
	def buttonBrightRevertclicked(self, button):
		self.scaleBright.set_value(preferenceBright)

	def buttonBalRevertclicked(self, button):
		self.scaleBal.set_value(preferenceBal)

	# default buttons
	def buttonBrightDefaultclicked(self, button):
		self.scaleBright.set_value(defaultBright)	   

	def buttonBalDefaultclicked(self, button):
		self.scaleBal.set_value(defaultBal)

	def __init__(self):
		self.glade = datafold+gladefile

		self.builder = Gtk.Builder()
		self.builder.add_from_file(self.glade)	   
		self.builder.connect_signals(self) ##
	   
		self.window = self.builder.get_object('window')
		self.image1 = self.builder.get_object('image1')
		self.imageR = self.builder.get_object('imageL')
		self.imageL = self.builder.get_object('imageR')

		self.labelImage1 = self.builder.get_object('labelImage1')
		self.labelImageL = self.builder.get_object('labelImageL')
		self.labelImageR = self.builder.get_object('labelImageR')
		
		self.labelViewing = self.builder.get_object('labelViewing')
		self.labelViewingTitle = self.builder.get_object('labelViewingTitle')
		self.buttonStart = self.builder.get_object('buttonStart')

		self.dialogHelp = self.builder.get_object('dialogHelp')
		self.buttonClose = self.builder.get_object('buttonClose')
		
		self.dialogboxAbout = self.builder.get_object('dialogboxAbout')

		self.messageQuestion = self.builder.get_object('messagedialogQuestion')
		self.messageWarning = self.builder.get_object('messagedialogWarning')
		self.messageInfo = self.builder.get_object('messagedialogInfo')
		self.messageFirst = self.builder.get_object('messagedialogFirst')
		self.messagedialogColours = self.builder.get_object('messagedialogColours')

		# for reading buttons		
		self.radiobuttontoggledAll = self.builder.get_object('radiobuttontoggledAll')
		self.radiobuttontoggled2D = self.builder.get_object('radiobuttontoggled2D')
		self.radiobuttontoggled3D = self.builder.get_object('radiobuttontoggled3D')
		self.radiobuttontoggledTriptych = self.builder.get_object('radiobuttontoggledTriptych')

		self.radiobuttontoggledAnaglyph = self.builder.get_object('radiobuttontoggledAnaglyph')
		self.radiobuttontoggledSidebyside = self.builder.get_object('radiobuttontoggledSidebyside')
		self.radiobuttontoggledCrossover = self.builder.get_object('radiobuttontoggledCrossover')

		self.radiobuttontoggledLevel = self.builder.get_object('radiobuttontoggledLevel')		
		self.radiobuttontoggledPopout = self.builder.get_object('radiobuttontoggledPopout')
		self.radiobuttonLP = self.builder.get_object('radiobuttonLP')

		# for setting buttons				
		self.radiobuttonAll = self.builder.get_object('radiobuttonAll')
		self.radiobutton2D = self.builder.get_object('radiobutton2D')
		self.radiobutton3D = self.builder.get_object('radiobutton3D')
		self.radiobuttonTriptych = self.builder.get_object('radiobuttonTriptych')

		self.radiobuttonAnaglyph = self.builder.get_object('radiobuttonAnaglyph')
		self.radiobuttonSidebyside = self.builder.get_object('radiobuttonSidebyside')
		self.radiobuttonCrossover = self.builder.get_object('radiobuttonCrossover')

		self.radiobuttonLevel = self.builder.get_object('radiobuttonLevel')		
		self.radiobuttonPopout = self.builder.get_object('radiobuttonPopout')
		
		# to update scale
		self.scaleBright = self.builder.get_object('scaleBright')
		self.scaleBal = self.builder.get_object('scaleBal')

		# to get scale number
		self.scaleBrightchanged = self.builder.get_object('scaleBrightchanged')
		self.scaleBalchanged = self.builder.get_object('scaleBalchanged')

		self.window.show(); self.window.maximize()

		#=======================================================================	   
		# set preference variables and set title
		getpreferences()

		# Set scale values from preference file
		self.scaleBright.set_value(choiceBright)	 
		self.scaleBal.set_value(choiceBal)	 

		# start in myfold folder
		os.chdir(myfold)	

		global okshow ; okshow = False

		if scope == 'Set':
			self.window.set_title(version + '		  Set: ' + myfile + '*.' + myext)
		else:
		  self.window.set_title(version + '		  Folder: ' + myfold)
		   
		if formatcode == 'S': # Side-by-Side
			self.radiobuttonSidebyside.set_active(True)
		elif formatcode == 'C': # Crossover
			self.radiobuttonCrossover.set_active(True)
		else:
			self.radiobuttonAnaglyph.set_active(True)

		if stylecode == 'P': # Popout
			self.radiobuttonPopout.set_active(True)
		else: # Level
			self.radiobuttonLevel.set_active(True)
		
		if view == '2D':
			self.radiobutton2D.set_active(True)
		elif view == '3D':
			self.radiobutton3D.set_active(True)
		elif view == 'Triptych':
			self.radiobuttonTriptych.set_active(True)
		else: # All
			self.radiobuttonAll.set_active(True)			

		okshow = True
		
		if firstrun:
			self.result = self.messageFirst.run() ; self.messageFirst.hide()
			with open(configfold + preffile, 'w') as fn:
				fn.write(version+'\n')
				fn.write(myfold+'\n')
				fn.write(myfile+'\n')
				fn.write(myext+'\n')
				fn.write(formatcode+'\n')
				fn.write(stylecode+'\n')
				fn.write(view+'\n')
				fn.write('No\n') 
				fn.write(str(choiceBright)+' '+str(choiceBal)+'\n')

if __name__ == '__main__':  
	main = GUI()	
	Gtk.main()
